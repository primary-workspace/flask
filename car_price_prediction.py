# -*- coding: utf-8 -*-
"""car_price_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1asL6thrulJ3eA_gRokrR8vmMGFnwXqUf
"""

import pandas as pd
car = pd.read_csv("quikr_car.csv")
car

car.head()

car.shape # the shape method is used to tell about thr dimensions of the dataframe in numpy and pandas

car.info()# it give information about dataframe that how many rows are there and how many coloumns are there, tells number of null elemnets

'''car.unique() method is used in pandas to return an array of the unique values present in a particular column of a DataFrame (or a Series).
It helps you identify all the distinct entries in a given column, excluding any duplicates.'''


car['year'].unique()

car['Price'].unique()

car['kms_driven'].unique()

car['fuel_type'].unique()

"""QUALITY OF THE DATA
1. year - has many non-year values
(we need to convert the object to integer )
2. Price - it has a term 'ask for price' and there is comma  (we need to convert the object to int and remove the commas )
3. kms_driven - nan values, kms is written with the int (need to convert the object into int)
4. fuel_type -  has nan values
5. name -  we would only keep the three words of the name
"""

backup =  car.copy()

'''The car.copy() method in pandas is used to create a deep copy of a DataFrame or Series.
A deep copy means that a new object is created in memory,
and changes made to the copy will not affect the original DataFrame (or Series), and vice versa.'''

"""NOW WE WILL CLEAN THE DATASET"""

car['year'].str.isnumeric()

'''
The code car['year'].str.isnumeric() is used in pandas to check if the values in the 'year'
column of the car DataFrame are numeric (i.e., consist of only digits).
'''

car = car[car['year'].str.isnumeric()]

car['year'] = car['year'].astype(int)

car.info()

car = car[car['Price'] != 'Ask For Price'] # removing the rows where we have price = 'ask for price

car['Price']=car['Price'].str.replace(',','') # replacing the comma with empty space in thr price

car['Price'].unique()

car['Price'] = car['Price'].astype(int)

car['kms_driven'] = car['kms_driven'].str.split(' ').str.get(0)
car['kms_driven'] = car['kms_driven'].str.replace(',','')
# this could be done in the single line
'''
car['kms_driven'] = car['kms_driven'].str.split(' ').str.get(0).str.replace(',','')
'''

car = car[car['kms_driven'] != 'Petrol']

car = car[car['kms_driven'].str.isnumeric()]

car['kms_driven'] = car['kms_driven'].astype(int)

car['kms_driven'].unique()

car.info()

car['fuel_type']

#car=car[~car['fuel_type'].isna()]
'''or this method can be used '''

car = car.dropna(subset = ['fuel_type'])

car['fuel_type'].unique()

car['name'] = car['name'].str.split(' ').str.slice(0,3) #.join(' ')

car['name'] = car['name'].str.join(' ')

car

car = car.reset_index(drop = True)

car.describe()

car = car[car['Price']<6e6]

car= car.reset_index(drop = True)

'''
now data is cleaned

'''

car.to_csv('Cleaned_car.csv')

car

X = car.drop(columns='Price')
y = car['Price']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2)

from sklearn.compose import make_column_transformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import r2_score
from sklearn.pipeline import make_pipeline

ohe = OneHotEncoder()
ohe.fit(X[['name','company','fuel_type']])

col_trans =  make_column_transformer((OneHotEncoder(categories = ohe.categories_),['name','company','fuel_type']),remainder='passthrough')

from sklearn.linear_model import LinearRegression
lr = LinearRegression()

pipe = make_pipeline(col_trans,lr)

pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)

r2_score(y_test,y_pred)

import pickle

pickle.dump(pipe,open('LinearRegressionModel.pkl','wb'))

pipe.predict(pd.DataFrame([['Maruti Suzuki Swift','Maruti',2019,100,'Petrol']],columns=['name', 'company','year','kms_driven','fuel_type']))

